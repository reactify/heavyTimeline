/**
 * Copyright (c) 2017 Enzien Audio, Ltd.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, and/or
 * sublicense copies of the Software, strictly on a non-commercial basis,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 * 
 * DO NOT MODIFY. THIS CODE IS MACHINE GENERATED BY THE ENZIEN AUDIO HEAVY COMPILER
 */

#include "Heavy_Test.hpp"

#define Context(_c) reinterpret_cast<Heavy_Test *>(_c)



/*
 * C Functions
 */

extern "C" {
  HV_EXPORT HeavyContextInterface *hv_Test_new(double sampleRate) {
    return new Heavy_Test(sampleRate);
  }

  HV_EXPORT HeavyContextInterface *hv_Test_new_with_options(double sampleRate,
      int poolKb, int inQueueKb, int outQueueKb) {
    return new Heavy_Test(sampleRate, poolKb, inQueueKb, outQueueKb);
  }
} // extern "C"







/*
 * Class Functions
 */

Heavy_Test::Heavy_Test(double sampleRate, int poolKb, int inQueueKb, int outQueueKb)
    : HeavyContext(sampleRate, poolKb, inQueueKb, outQueueKb) {
  numBytes += cVar_init_f(&cVar_uTMIK, 1000.0f);
  numBytes += cBinop_init(&cBinop_zrwKo, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_J2Qew, 0.0f);
  numBytes += cBinop_init(&cBinop_csIqt, 0.0f); // __div
  numBytes += cBinop_init(&cBinop_73Ifa, 0.0f); // __sub
  
  // schedule a message to trigger all loadbangs via the __hv_init receiver
  scheduleMessageForReceiver(0xCE5CC65B, msg_initWithBang(HV_MESSAGE_ON_STACK(1), 0));
}

Heavy_Test::~Heavy_Test() {
  // nothing to free
}

HvTable *Heavy_Test::getTableForHash(hv_uint32_t tableHash) {
  return nullptr;
}

void Heavy_Test::scheduleMessageForReceiver(hv_uint32_t receiverHash, HvMessage *m) {
  switch (receiverHash) {
    case 0xCE5CC65B: { // __hv_init
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_W0OQm_sendMessage);
      break;
    }
    default: return;
  }
}

int Heavy_Test::getParameterInfo(int index, HvParameterInfo *info) {
  if (info != nullptr) {
    switch (index) {
      default: {
        info->name = "invalid parameter index";
        info->hash = 0;
        info->type = HvParameterType::HV_PARAM_TYPE_PARAMETER;
        info->minVal = 0.0f;
        info->maxVal = 0.0f;
        info->defaultVal = 0.0f;
        break;
      }
    }
  }
  return 0;
}



/*
 * Send Function Implementations
 */


void Heavy_Test::cBinop_a0HQ9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_zrwKo, HV_BINOP_MULTIPLY, 1, m, &cBinop_zrwKo_sendMessage);
}

void Heavy_Test::cSwitchcase_MNnrJ_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_j1yZD_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_j1yZD_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_8ouos_sendMessage);
      break;
    }
  }
}

void Heavy_Test::cMsg_8fq8Q_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_u5Dzj_sendMessage);
}

void Heavy_Test::cSystem_u5Dzj_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_a0HQ9_sendMessage);
}

void Heavy_Test::cVar_uTMIK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_zrwKo, HV_BINOP_MULTIPLY, 0, m, &cBinop_zrwKo_sendMessage);
}

void Heavy_Test::cBinop_zrwKo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_4lwGp_sendMessage);
}

void Heavy_Test::cCast_8ouos_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_j1yZD_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_J2Qew, 0, m, &cDelay_J2Qew_sendMessage);
  cMsg_DhNRV_sendMessage(_c, 0, m);
  cMsg_8WgZ8_sendMessage(_c, 0, m);
}

void Heavy_Test::cBinop_4lwGp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_J2Qew, 2, m, &cDelay_J2Qew_sendMessage);
}

void Heavy_Test::cMsg_j1yZD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_J2Qew, 0, m, &cDelay_J2Qew_sendMessage);
}

void Heavy_Test::cDelay_J2Qew_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_J2Qew, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_J2Qew, 0, m, &cDelay_J2Qew_sendMessage);
  cMsg_DhNRV_sendMessage(_c, 0, m);
  cMsg_8WgZ8_sendMessage(_c, 0, m);
}

void Heavy_Test::cReceive_W0OQm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_8fq8Q_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_uTMIK, 0, m, &cVar_uTMIK_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_GQc6I_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Jpz28_sendMessage);
}

void Heavy_Test::cMsg_8WgZ8_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "currentTime");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_VkiBV_sendMessage);
}

void Heavy_Test::cBinop_fhXFX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_csIqt, HV_BINOP_DIVIDE, 1, m, &cBinop_csIqt_sendMessage);
}

void Heavy_Test::cSystem_YMM5p_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_73Ifa, HV_BINOP_SUBTRACT, 1, m, &cBinop_73Ifa_sendMessage);
}

void Heavy_Test::cMsg_PeanV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "currentTime");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_YMM5p_sendMessage);
}

void Heavy_Test::cBinop_csIqt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cPrint_onMessage(_c, m, "Time");
}

void Heavy_Test::cSystem_VkiBV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_73Ifa, HV_BINOP_SUBTRACT, 0, m, &cBinop_73Ifa_sendMessage);
}

void Heavy_Test::cMsg_DhNRV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_6iq1x_sendMessage);
}

void Heavy_Test::cBinop_73Ifa_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_csIqt, HV_BINOP_DIVIDE, 0, m, &cBinop_csIqt_sendMessage);
}

void Heavy_Test::cSystem_6iq1x_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_fhXFX_sendMessage);
}

void Heavy_Test::cCast_Jpz28_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_MNnrJ_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_Test::cCast_GQc6I_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_PeanV_sendMessage(_c, 0, m);
}




/*
 * Context Process Implementation
 */

int Heavy_Test::process(float **inputBuffers, float **outputBuffers, int n) {
  while (hLp_hasData(&inQueue)) {
    hv_uint32_t numBytes = 0;
    ReceiverMessagePair *p = reinterpret_cast<ReceiverMessagePair *>(hLp_getReadBuffer(&inQueue, &numBytes));
    hv_assert(numBytes >= sizeof(ReceiverMessagePair));
    scheduleMessageForReceiver(p->receiverHash, &p->msg);
    hLp_consume(&inQueue);
  }
  
  hv_uint32_t nextBlock = blockStartTimestamp + n;
  while (mq_hasMessageBefore(&mq, nextBlock)) {
    MessageNode *const node = mq_peek(&mq);
    node->sendMessage(this, node->let, node->m);
    mq_pop(&mq);
  }

  blockStartTimestamp = nextBlock;
  return n;
}

int Heavy_Test::processInline(float *inputBuffers, float *outputBuffers, int n4) {
  hv_assert(!(n4 & HV_N_SIMD_MASK)); // ensure that n4 is a multiple of HV_N_SIMD

  // define the heavy input buffer for 0 channel(s)
  float **const bIn = NULL;

  // define the heavy output buffer for 0 channel(s)
  float **const bOut = NULL;

  int n = process(bIn, bOut, n4);
  return n;
}

int Heavy_Test::processInlineInterleaved(float *inputBuffers, float *outputBuffers, int n4) {
  hv_assert(n4 & ~HV_N_SIMD_MASK); // ensure that n4 is a multiple of HV_N_SIMD

  // define the heavy input buffer for 0 channel(s), uninterleave
  float *const bIn = NULL;

  // define the heavy output buffer for 0 channel(s)
  float *const bOut = NULL;

  int n = processInline(bIn, bOut, n4);

  

  return n;
}
